name: "hono-next-example--prod"

services:

  db:
    image: postgres:17.5
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      PGPORT: ${POSTGRES_PORT}
    ports:
      - ${POSTGRES_PORT}:${POSTGRES_PORT}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB} || exit 1"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 5s

  db_migrate:
    build:
      context: .
      dockerfile: packages/backend_app/Dockerfile
      target: release
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_PORT: ${POSTGRES_PORT}
      DATABASE_HOST: db
    command: |
      bun db:push
    depends_on:
      db:
        condition: service_healthy

  backend_app:
    build:
      context: .
      dockerfile: packages/backend_app/Dockerfile
      target: release
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_PORT: ${POSTGRES_PORT}
      DATABASE_HOST: db
      ENABLE_DB_INITIALIZE: true
    ports:
      - "${BACKEND_APP_PORT}:${BACKEND_APP_PORT}"
    depends_on:
      db_migrate:
        condition: service_completed_successfully

  backend_health_check:
    image: curlimages/curl
    command:
      - sh
      - -c
      - |
        for i in $(seq 1 3); do
          if curl -sf "http://backend_app:${BACKEND_APP_PORT}/healthz"; then
            echo "App is healthy."
            exit 0
          fi
          echo "Waiting for app... (attempt $$i/3)"
          sleep 2
        done
        echo "Healthcheck failed after 3 attempts"
        exit 1
    depends_on:
      - backend_app

  frontend_app:
    build:
      context: .
      dockerfile: packages/frontend_app/Dockerfile
      target: runner
      args:
        BACKEND_APP_SERVER_URL: ${BACKEND_APP_SERVER_URL}
        NEXT_PUBLIC_BACKEND_APP_URL: ${NEXT_PUBLIC_BACKEND_APP_URL}
    ports:
      - "${FRONTEND_APP_PORT}:${FRONTEND_APP_PORT}"
    depends_on:
      backend_health_check:
        condition: service_completed_successfully

  e2e:
    build:
      context: .
      dockerfile: packages/e2e/Dockerfile
    environment:
      CI: true
      BACKEND_APP_SERVER_URL: ${BACKEND_APP_SERVER_URL}
      FRONTEND_APP_SERVER_URL: ${FRONTEND_APP_SERVER_URL}
      FRONTEND_APP_PORT: ${FRONTEND_APP_PORT}
    depends_on:
      - frontend_app
    volumes:
      - ./packages/e2e/playwright-report:/app/packages/e2e/playwright-report

  e2e_screenshot:
    build:
      context: .
      dockerfile: packages/e2e/Dockerfile
    environment:
      BACKEND_APP_SERVER_URL: ${BACKEND_APP_SERVER_URL}
      FRONTEND_APP_SERVER_URL: ${FRONTEND_APP_SERVER_URL}
      FRONTEND_APP_PORT: ${FRONTEND_APP_PORT}
    command: |
      npm run e2e:docker:screenshot
    depends_on:
      - frontend_app
    volumes:
      - ./packages/e2e:/app/packages/e2e
