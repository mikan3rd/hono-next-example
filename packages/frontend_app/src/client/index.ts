/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * backend_app OpenAPI
 * OpenAPI spec version: 1.0.0
 */

import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { useMutation, useQuery, useSuspenseQuery } from "@tanstack/react-query";
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from "axios";
import axios from "axios";

import type {
  DeletePostsId404,
  DeletePostsId500,
  ErrorResponse,
  GetPosts200,
  GetPosts404,
  GetPosts500,
  PostPosts200,
  PostPosts404,
  PostPosts500,
  PostPostsBody,
  PutPostsId200,
  PutPostsId404,
  PutPostsId500,
  PutPostsIdBody,
} from "./index.schemas";

export const getPosts = (
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<GetPosts200>> => {
  return axios.get(`${process.env.NEXT_PUBLIC_BACKEND_APP_URL}/posts`, options);
};

export const getGetPostsQueryKey = () => {
  return [`${process.env.NEXT_PUBLIC_BACKEND_APP_URL}/posts`] as const;
};

export const getGetPostsQueryOptions = <
  TData = Awaited<ReturnType<typeof getPosts>>,
  TError = AxiosError<ErrorResponse | GetPosts404 | GetPosts500>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getPosts>>, TError, TData>
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetPostsQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getPosts>>> = ({
    signal,
  }) => getPosts({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getPosts>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetPostsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getPosts>>
>;
export type GetPostsQueryError = AxiosError<
  ErrorResponse | GetPosts404 | GetPosts500
>;

export function useGetPosts<
  TData = Awaited<ReturnType<typeof getPosts>>,
  TError = AxiosError<ErrorResponse | GetPosts404 | GetPosts500>,
>(
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPosts>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPosts>>,
          TError,
          Awaited<ReturnType<typeof getPosts>>
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetPosts<
  TData = Awaited<ReturnType<typeof getPosts>>,
  TError = AxiosError<ErrorResponse | GetPosts404 | GetPosts500>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPosts>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPosts>>,
          TError,
          Awaited<ReturnType<typeof getPosts>>
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetPosts<
  TData = Awaited<ReturnType<typeof getPosts>>,
  TError = AxiosError<ErrorResponse | GetPosts404 | GetPosts500>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPosts>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetPosts<
  TData = Awaited<ReturnType<typeof getPosts>>,
  TError = AxiosError<ErrorResponse | GetPosts404 | GetPosts500>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPosts>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetPostsQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const prefetchGetPostsQuery = async <
  TData = Awaited<ReturnType<typeof getPosts>>,
  TError = AxiosError<ErrorResponse | GetPosts404 | GetPosts500>,
>(
  queryClient: QueryClient,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPosts>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
): Promise<QueryClient> => {
  const queryOptions = getGetPostsQueryOptions(options);

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

export const getGetPostsSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof getPosts>>,
  TError = AxiosError<ErrorResponse | GetPosts404 | GetPosts500>,
>(options?: {
  query?: Partial<
    UseSuspenseQueryOptions<Awaited<ReturnType<typeof getPosts>>, TError, TData>
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetPostsQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getPosts>>> = ({
    signal,
  }) => getPosts({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof getPosts>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetPostsSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof getPosts>>
>;
export type GetPostsSuspenseQueryError = AxiosError<
  ErrorResponse | GetPosts404 | GetPosts500
>;

export function useGetPostsSuspense<
  TData = Awaited<ReturnType<typeof getPosts>>,
  TError = AxiosError<ErrorResponse | GetPosts404 | GetPosts500>,
>(
  options: {
    query: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getPosts>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetPostsSuspense<
  TData = Awaited<ReturnType<typeof getPosts>>,
  TError = AxiosError<ErrorResponse | GetPosts404 | GetPosts500>,
>(
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getPosts>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetPostsSuspense<
  TData = Awaited<ReturnType<typeof getPosts>>,
  TError = AxiosError<ErrorResponse | GetPosts404 | GetPosts500>,
>(
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getPosts>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetPostsSuspense<
  TData = Awaited<ReturnType<typeof getPosts>>,
  TError = AxiosError<ErrorResponse | GetPosts404 | GetPosts500>,
>(
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getPosts>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetPostsSuspenseQueryOptions(options);

  const query = useSuspenseQuery(
    queryOptions,
    queryClient,
  ) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const postPosts = (
  postPostsBody: PostPostsBody,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<PostPosts200>> => {
  return axios.post(
    `${process.env.NEXT_PUBLIC_BACKEND_APP_URL}/posts`,
    postPostsBody,
    options,
  );
};

export const getPostPostsMutationOptions = <
  TError = AxiosError<ErrorResponse | PostPosts404 | PostPosts500>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postPosts>>,
    TError,
    { data: PostPostsBody },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postPosts>>,
  TError,
  { data: PostPostsBody },
  TContext
> => {
  const mutationKey = ["postPosts"];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postPosts>>,
    { data: PostPostsBody }
  > = (props) => {
    const { data } = props ?? {};

    return postPosts(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostPostsMutationResult = NonNullable<
  Awaited<ReturnType<typeof postPosts>>
>;
export type PostPostsMutationBody = PostPostsBody;
export type PostPostsMutationError = AxiosError<
  ErrorResponse | PostPosts404 | PostPosts500
>;

export const usePostPosts = <
  TError = AxiosError<ErrorResponse | PostPosts404 | PostPosts500>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postPosts>>,
      TError,
      { data: PostPostsBody },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postPosts>>,
  TError,
  { data: PostPostsBody },
  TContext
> => {
  const mutationOptions = getPostPostsMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const putPostsId = (
  id: number,
  putPostsIdBody: PutPostsIdBody,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<PutPostsId200>> => {
  return axios.put(
    `${process.env.NEXT_PUBLIC_BACKEND_APP_URL}/posts/${id}`,
    putPostsIdBody,
    options,
  );
};

export const getPutPostsIdMutationOptions = <
  TError = AxiosError<ErrorResponse | PutPostsId404 | PutPostsId500>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putPostsId>>,
    TError,
    { id: number; data: PutPostsIdBody },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putPostsId>>,
  TError,
  { id: number; data: PutPostsIdBody },
  TContext
> => {
  const mutationKey = ["putPostsId"];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putPostsId>>,
    { id: number; data: PutPostsIdBody }
  > = (props) => {
    const { id, data } = props ?? {};

    return putPostsId(id, data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutPostsIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putPostsId>>
>;
export type PutPostsIdMutationBody = PutPostsIdBody;
export type PutPostsIdMutationError = AxiosError<
  ErrorResponse | PutPostsId404 | PutPostsId500
>;

export const usePutPostsId = <
  TError = AxiosError<ErrorResponse | PutPostsId404 | PutPostsId500>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof putPostsId>>,
      TError,
      { id: number; data: PutPostsIdBody },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof putPostsId>>,
  TError,
  { id: number; data: PutPostsIdBody },
  TContext
> => {
  const mutationOptions = getPutPostsIdMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const deletePostsId = (
  id: number,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<null>> => {
  return axios.delete(
    `${process.env.NEXT_PUBLIC_BACKEND_APP_URL}/posts/${id}`,
    options,
  );
};

export const getDeletePostsIdMutationOptions = <
  TError = AxiosError<ErrorResponse | DeletePostsId404 | DeletePostsId500>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deletePostsId>>,
    TError,
    { id: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deletePostsId>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationKey = ["deletePostsId"];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deletePostsId>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deletePostsId(id, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeletePostsIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deletePostsId>>
>;

export type DeletePostsIdMutationError = AxiosError<
  ErrorResponse | DeletePostsId404 | DeletePostsId500
>;

export const useDeletePostsId = <
  TError = AxiosError<ErrorResponse | DeletePostsId404 | DeletePostsId500>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deletePostsId>>,
      TError,
      { id: number },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof deletePostsId>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions = getDeletePostsIdMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
