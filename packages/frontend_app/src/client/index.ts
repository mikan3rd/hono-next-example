/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * backend_app OpenAPI
 * OpenAPI spec version: 1.0.0
 */

import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { useMutation, useQuery, useSuspenseQuery } from "@tanstack/react-query";
import { customFetch } from "../lib/custom-fetch";
import type {
  DeletePostsId401,
  DeletePostsId403,
  DeletePostsId404,
  DeletePostsId500,
  ErrorResponse,
  GetPosts200,
  GetPosts401,
  GetPosts403,
  GetPosts404,
  GetPosts500,
  PostPosts200,
  PostPosts401,
  PostPosts403,
  PostPosts404,
  PostPosts500,
  PostPostsBody,
  PostUserSignup401,
  PostUserSignup403,
  PostUserSignup404,
  PostUserSignup500,
  PutPostsId200,
  PutPostsId401,
  PutPostsId403,
  PutPostsId404,
  PutPostsId500,
  PutPostsIdBody,
} from "./index.schemas";

type AwaitedInput<T> = PromiseLike<T> | T;

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

export type postUserSignupResponse200 = {
  data: null;
  status: 200;
};

export type postUserSignupResponse400 = {
  data: ErrorResponse;
  status: 400;
};

export type postUserSignupResponse401 = {
  data: PostUserSignup401;
  status: 401;
};

export type postUserSignupResponse403 = {
  data: PostUserSignup403;
  status: 403;
};

export type postUserSignupResponse404 = {
  data: PostUserSignup404;
  status: 404;
};

export type postUserSignupResponse500 = {
  data: PostUserSignup500;
  status: 500;
};

export type postUserSignupResponseComposite =
  | postUserSignupResponse200
  | postUserSignupResponse400
  | postUserSignupResponse401
  | postUserSignupResponse403
  | postUserSignupResponse404
  | postUserSignupResponse500;

export type postUserSignupResponse = postUserSignupResponseComposite & {
  headers: Headers;
};

export const getPostUserSignupUrl = () => {
  return `/user/signup`;
};

export const postUserSignup = async (
  options?: RequestInit,
): Promise<postUserSignupResponse> => {
  return customFetch<postUserSignupResponse>(getPostUserSignupUrl(), {
    ...options,
    method: "POST",
  });
};

export const getPostUserSignupMutationOptions = <
  TError =
    | ErrorResponse
    | PostUserSignup401
    | PostUserSignup403
    | PostUserSignup404
    | PostUserSignup500,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postUserSignup>>,
    TError,
    void,
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postUserSignup>>,
  TError,
  void,
  TContext
> => {
  const mutationKey = ["postUserSignup"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postUserSignup>>,
    void
  > = () => {
    return postUserSignup(requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostUserSignupMutationResult = NonNullable<
  Awaited<ReturnType<typeof postUserSignup>>
>;

export type PostUserSignupMutationError =
  | ErrorResponse
  | PostUserSignup401
  | PostUserSignup403
  | PostUserSignup404
  | PostUserSignup500;

export const usePostUserSignup = <
  TError =
    | ErrorResponse
    | PostUserSignup401
    | PostUserSignup403
    | PostUserSignup404
    | PostUserSignup500,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postUserSignup>>,
      TError,
      void,
      TContext
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postUserSignup>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions = getPostUserSignupMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export type getPostsResponse200 = {
  data: GetPosts200;
  status: 200;
};

export type getPostsResponse400 = {
  data: ErrorResponse;
  status: 400;
};

export type getPostsResponse401 = {
  data: GetPosts401;
  status: 401;
};

export type getPostsResponse403 = {
  data: GetPosts403;
  status: 403;
};

export type getPostsResponse404 = {
  data: GetPosts404;
  status: 404;
};

export type getPostsResponse500 = {
  data: GetPosts500;
  status: 500;
};

export type getPostsResponseComposite =
  | getPostsResponse200
  | getPostsResponse400
  | getPostsResponse401
  | getPostsResponse403
  | getPostsResponse404
  | getPostsResponse500;

export type getPostsResponse = getPostsResponseComposite & {
  headers: Headers;
};

export const getGetPostsUrl = () => {
  return `/posts`;
};

export const getPosts = async (
  options?: RequestInit,
): Promise<getPostsResponse> => {
  return customFetch<getPostsResponse>(getGetPostsUrl(), {
    ...options,
    method: "GET",
  });
};

export const getGetPostsQueryKey = () => {
  return [`/posts`] as const;
};

export const getGetPostsQueryOptions = <
  TData = Awaited<ReturnType<typeof getPosts>>,
  TError =
    | ErrorResponse
    | GetPosts401
    | GetPosts403
    | GetPosts404
    | GetPosts500,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getPosts>>, TError, TData>
  >;
  request?: SecondParameter<typeof customFetch>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetPostsQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getPosts>>> = ({
    signal,
  }) => getPosts({ signal, ...requestOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getPosts>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetPostsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getPosts>>
>;
export type GetPostsQueryError =
  | ErrorResponse
  | GetPosts401
  | GetPosts403
  | GetPosts404
  | GetPosts500;

export function useGetPosts<
  TData = Awaited<ReturnType<typeof getPosts>>,
  TError =
    | ErrorResponse
    | GetPosts401
    | GetPosts403
    | GetPosts404
    | GetPosts500,
>(
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPosts>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPosts>>,
          TError,
          Awaited<ReturnType<typeof getPosts>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetPosts<
  TData = Awaited<ReturnType<typeof getPosts>>,
  TError =
    | ErrorResponse
    | GetPosts401
    | GetPosts403
    | GetPosts404
    | GetPosts500,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPosts>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPosts>>,
          TError,
          Awaited<ReturnType<typeof getPosts>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetPosts<
  TData = Awaited<ReturnType<typeof getPosts>>,
  TError =
    | ErrorResponse
    | GetPosts401
    | GetPosts403
    | GetPosts404
    | GetPosts500,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPosts>>, TError, TData>
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetPosts<
  TData = Awaited<ReturnType<typeof getPosts>>,
  TError =
    | ErrorResponse
    | GetPosts401
    | GetPosts403
    | GetPosts404
    | GetPosts500,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPosts>>, TError, TData>
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetPostsQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const prefetchGetPostsQuery = async <
  TData = Awaited<ReturnType<typeof getPosts>>,
  TError =
    | ErrorResponse
    | GetPosts401
    | GetPosts403
    | GetPosts404
    | GetPosts500,
>(
  queryClient: QueryClient,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPosts>>, TError, TData>
    >;
    request?: SecondParameter<typeof customFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = getGetPostsQueryOptions(options);

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

export const getGetPostsSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof getPosts>>,
  TError =
    | ErrorResponse
    | GetPosts401
    | GetPosts403
    | GetPosts404
    | GetPosts500,
>(options?: {
  query?: Partial<
    UseSuspenseQueryOptions<Awaited<ReturnType<typeof getPosts>>, TError, TData>
  >;
  request?: SecondParameter<typeof customFetch>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetPostsQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getPosts>>> = ({
    signal,
  }) => getPosts({ signal, ...requestOptions });

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof getPosts>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetPostsSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof getPosts>>
>;
export type GetPostsSuspenseQueryError =
  | ErrorResponse
  | GetPosts401
  | GetPosts403
  | GetPosts404
  | GetPosts500;

export function useGetPostsSuspense<
  TData = Awaited<ReturnType<typeof getPosts>>,
  TError =
    | ErrorResponse
    | GetPosts401
    | GetPosts403
    | GetPosts404
    | GetPosts500,
>(
  options: {
    query: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getPosts>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetPostsSuspense<
  TData = Awaited<ReturnType<typeof getPosts>>,
  TError =
    | ErrorResponse
    | GetPosts401
    | GetPosts403
    | GetPosts404
    | GetPosts500,
>(
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getPosts>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetPostsSuspense<
  TData = Awaited<ReturnType<typeof getPosts>>,
  TError =
    | ErrorResponse
    | GetPosts401
    | GetPosts403
    | GetPosts404
    | GetPosts500,
>(
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getPosts>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetPostsSuspense<
  TData = Awaited<ReturnType<typeof getPosts>>,
  TError =
    | ErrorResponse
    | GetPosts401
    | GetPosts403
    | GetPosts404
    | GetPosts500,
>(
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getPosts>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetPostsSuspenseQueryOptions(options);

  const query = useSuspenseQuery(
    queryOptions,
    queryClient,
  ) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export type postPostsResponse200 = {
  data: PostPosts200;
  status: 200;
};

export type postPostsResponse400 = {
  data: ErrorResponse;
  status: 400;
};

export type postPostsResponse401 = {
  data: PostPosts401;
  status: 401;
};

export type postPostsResponse403 = {
  data: PostPosts403;
  status: 403;
};

export type postPostsResponse404 = {
  data: PostPosts404;
  status: 404;
};

export type postPostsResponse500 = {
  data: PostPosts500;
  status: 500;
};

export type postPostsResponseComposite =
  | postPostsResponse200
  | postPostsResponse400
  | postPostsResponse401
  | postPostsResponse403
  | postPostsResponse404
  | postPostsResponse500;

export type postPostsResponse = postPostsResponseComposite & {
  headers: Headers;
};

export const getPostPostsUrl = () => {
  return `/posts`;
};

export const postPosts = async (
  postPostsBody: PostPostsBody,
  options?: RequestInit,
): Promise<postPostsResponse> => {
  return customFetch<postPostsResponse>(getPostPostsUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(postPostsBody),
  });
};

export const getPostPostsMutationOptions = <
  TError =
    | ErrorResponse
    | PostPosts401
    | PostPosts403
    | PostPosts404
    | PostPosts500,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postPosts>>,
    TError,
    { data: PostPostsBody },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postPosts>>,
  TError,
  { data: PostPostsBody },
  TContext
> => {
  const mutationKey = ["postPosts"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postPosts>>,
    { data: PostPostsBody }
  > = (props) => {
    const { data } = props ?? {};

    return postPosts(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostPostsMutationResult = NonNullable<
  Awaited<ReturnType<typeof postPosts>>
>;
export type PostPostsMutationBody = PostPostsBody;
export type PostPostsMutationError =
  | ErrorResponse
  | PostPosts401
  | PostPosts403
  | PostPosts404
  | PostPosts500;

export const usePostPosts = <
  TError =
    | ErrorResponse
    | PostPosts401
    | PostPosts403
    | PostPosts404
    | PostPosts500,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postPosts>>,
      TError,
      { data: PostPostsBody },
      TContext
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postPosts>>,
  TError,
  { data: PostPostsBody },
  TContext
> => {
  const mutationOptions = getPostPostsMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export type putPostsIdResponse200 = {
  data: PutPostsId200;
  status: 200;
};

export type putPostsIdResponse400 = {
  data: ErrorResponse;
  status: 400;
};

export type putPostsIdResponse401 = {
  data: PutPostsId401;
  status: 401;
};

export type putPostsIdResponse403 = {
  data: PutPostsId403;
  status: 403;
};

export type putPostsIdResponse404 = {
  data: PutPostsId404;
  status: 404;
};

export type putPostsIdResponse500 = {
  data: PutPostsId500;
  status: 500;
};

export type putPostsIdResponseComposite =
  | putPostsIdResponse200
  | putPostsIdResponse400
  | putPostsIdResponse401
  | putPostsIdResponse403
  | putPostsIdResponse404
  | putPostsIdResponse500;

export type putPostsIdResponse = putPostsIdResponseComposite & {
  headers: Headers;
};

export const getPutPostsIdUrl = (id: number) => {
  return `/posts/${id}`;
};

export const putPostsId = async (
  id: number,
  putPostsIdBody: PutPostsIdBody,
  options?: RequestInit,
): Promise<putPostsIdResponse> => {
  return customFetch<putPostsIdResponse>(getPutPostsIdUrl(id), {
    ...options,
    method: "PUT",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(putPostsIdBody),
  });
};

export const getPutPostsIdMutationOptions = <
  TError =
    | ErrorResponse
    | PutPostsId401
    | PutPostsId403
    | PutPostsId404
    | PutPostsId500,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putPostsId>>,
    TError,
    { id: number; data: PutPostsIdBody },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putPostsId>>,
  TError,
  { id: number; data: PutPostsIdBody },
  TContext
> => {
  const mutationKey = ["putPostsId"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putPostsId>>,
    { id: number; data: PutPostsIdBody }
  > = (props) => {
    const { id, data } = props ?? {};

    return putPostsId(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutPostsIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putPostsId>>
>;
export type PutPostsIdMutationBody = PutPostsIdBody;
export type PutPostsIdMutationError =
  | ErrorResponse
  | PutPostsId401
  | PutPostsId403
  | PutPostsId404
  | PutPostsId500;

export const usePutPostsId = <
  TError =
    | ErrorResponse
    | PutPostsId401
    | PutPostsId403
    | PutPostsId404
    | PutPostsId500,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof putPostsId>>,
      TError,
      { id: number; data: PutPostsIdBody },
      TContext
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof putPostsId>>,
  TError,
  { id: number; data: PutPostsIdBody },
  TContext
> => {
  const mutationOptions = getPutPostsIdMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export type deletePostsIdResponse200 = {
  data: null;
  status: 200;
};

export type deletePostsIdResponse400 = {
  data: ErrorResponse;
  status: 400;
};

export type deletePostsIdResponse401 = {
  data: DeletePostsId401;
  status: 401;
};

export type deletePostsIdResponse403 = {
  data: DeletePostsId403;
  status: 403;
};

export type deletePostsIdResponse404 = {
  data: DeletePostsId404;
  status: 404;
};

export type deletePostsIdResponse500 = {
  data: DeletePostsId500;
  status: 500;
};

export type deletePostsIdResponseComposite =
  | deletePostsIdResponse200
  | deletePostsIdResponse400
  | deletePostsIdResponse401
  | deletePostsIdResponse403
  | deletePostsIdResponse404
  | deletePostsIdResponse500;

export type deletePostsIdResponse = deletePostsIdResponseComposite & {
  headers: Headers;
};

export const getDeletePostsIdUrl = (id: number) => {
  return `/posts/${id}`;
};

export const deletePostsId = async (
  id: number,
  options?: RequestInit,
): Promise<deletePostsIdResponse> => {
  return customFetch<deletePostsIdResponse>(getDeletePostsIdUrl(id), {
    ...options,
    method: "DELETE",
  });
};

export const getDeletePostsIdMutationOptions = <
  TError =
    | ErrorResponse
    | DeletePostsId401
    | DeletePostsId403
    | DeletePostsId404
    | DeletePostsId500,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deletePostsId>>,
    TError,
    { id: number },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deletePostsId>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationKey = ["deletePostsId"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deletePostsId>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deletePostsId(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeletePostsIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deletePostsId>>
>;

export type DeletePostsIdMutationError =
  | ErrorResponse
  | DeletePostsId401
  | DeletePostsId403
  | DeletePostsId404
  | DeletePostsId500;

export const useDeletePostsId = <
  TError =
    | ErrorResponse
    | DeletePostsId401
    | DeletePostsId403
    | DeletePostsId404
    | DeletePostsId500,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deletePostsId>>,
      TError,
      { id: number },
      TContext
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof deletePostsId>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions = getDeletePostsIdMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
