/**
 * Generated by orval v7.13.0 üç∫
 * Do not edit manually.
 * backend_app OpenAPI
 * OpenAPI spec version: 1.0.0
 */
import { faker } from "@faker-js/faker";
import type { RequestHandlerOptions } from "msw";
import { HttpResponse, http } from "msw";

import type {
  GetPosts200,
  PostPosts200,
  PutPostsPublicId200,
  User,
} from "./index.schemas";

export const getGetUserLoginResponseMock = (
  overrideResponse: Partial<User> = {},
): User => ({
  public_id: faker.string.uuid(),
  display_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
  ...overrideResponse,
});

export const getGetPostsResponseMock = (
  overrideResponse: Partial<GetPosts200> = {},
): GetPosts200 => ({
  posts: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    ...{
      public_id: faker.string.uuid(),
      content: faker.string.alpha({ length: { min: 10, max: 20 } }),
      created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
      updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
    },
    ...{
      user: {
        public_id: faker.string.uuid(),
        display_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
      },
    },
  })),
  ...overrideResponse,
});

export const getPostPostsResponseMock = (
  overrideResponse: Partial<PostPosts200> = {},
): PostPosts200 => ({
  post: {
    ...{
      public_id: faker.string.uuid(),
      content: faker.string.alpha({ length: { min: 10, max: 20 } }),
      created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
      updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
    },
    ...{
      user: {
        public_id: faker.string.uuid(),
        display_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
      },
    },
  },
  ...overrideResponse,
});

export const getPutPostsPublicIdResponseMock = (
  overrideResponse: Partial<PutPostsPublicId200> = {},
): PutPostsPublicId200 => ({
  post: {
    ...{
      public_id: faker.string.uuid(),
      content: faker.string.alpha({ length: { min: 10, max: 20 } }),
      created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
      updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
    },
    ...{
      user: {
        public_id: faker.string.uuid(),
        display_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
      },
    },
  },
  ...overrideResponse,
});

export const getPostUserSignupMockHandler = (
  overrideResponse?:
    | void
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<void> | void),
  options?: RequestHandlerOptions,
) => {
  return http.post(
    "*/user/signup",
    async (info) => {
      if (typeof overrideResponse === "function") {
        await overrideResponse(info);
      }
      return new HttpResponse(null, { status: 200 });
    },
    options,
  );
};

export const getGetUserLoginMockHandler = (
  overrideResponse?:
    | User
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<User> | User),
  options?: RequestHandlerOptions,
) => {
  return http.get(
    "*/user/login",
    async (info) => {
      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getGetUserLoginResponseMock(),
        ),
        { status: 200, headers: { "Content-Type": "application/json" } },
      );
    },
    options,
  );
};

export const getGetPostsMockHandler = (
  overrideResponse?:
    | GetPosts200
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<GetPosts200> | GetPosts200),
  options?: RequestHandlerOptions,
) => {
  return http.get(
    "*/posts",
    async (info) => {
      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getGetPostsResponseMock(),
        ),
        { status: 200, headers: { "Content-Type": "application/json" } },
      );
    },
    options,
  );
};

export const getPostPostsMockHandler = (
  overrideResponse?:
    | PostPosts200
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<PostPosts200> | PostPosts200),
  options?: RequestHandlerOptions,
) => {
  return http.post(
    "*/posts",
    async (info) => {
      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getPostPostsResponseMock(),
        ),
        { status: 200, headers: { "Content-Type": "application/json" } },
      );
    },
    options,
  );
};

export const getPutPostsPublicIdMockHandler = (
  overrideResponse?:
    | PutPostsPublicId200
    | ((
        info: Parameters<Parameters<typeof http.put>[1]>[0],
      ) => Promise<PutPostsPublicId200> | PutPostsPublicId200),
  options?: RequestHandlerOptions,
) => {
  return http.put(
    "*/posts/:publicId",
    async (info) => {
      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getPutPostsPublicIdResponseMock(),
        ),
        { status: 200, headers: { "Content-Type": "application/json" } },
      );
    },
    options,
  );
};

export const getDeletePostsPublicIdMockHandler = (
  overrideResponse?:
    | void
    | ((
        info: Parameters<Parameters<typeof http.delete>[1]>[0],
      ) => Promise<void> | void),
  options?: RequestHandlerOptions,
) => {
  return http.delete(
    "*/posts/:publicId",
    async (info) => {
      if (typeof overrideResponse === "function") {
        await overrideResponse(info);
      }
      return new HttpResponse(null, { status: 200 });
    },
    options,
  );
};
export const getBackendAppOpenAPIMock = () => [
  getPostUserSignupMockHandler(),
  getGetUserLoginMockHandler(),
  getGetPostsMockHandler(),
  getPostPostsMockHandler(),
  getPutPostsPublicIdMockHandler(),
  getDeletePostsPublicIdMockHandler(),
];
