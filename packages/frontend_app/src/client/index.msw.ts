/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * backend_app OpenAPI
 * OpenAPI spec version: 1.0.0
 */
import { faker } from "@faker-js/faker";

import { HttpResponse, http } from "msw";

import type { GetPosts200, PostPosts200, PutPostsId200 } from "./index.schemas";

export const getGetPostsResponseMock = (
  overrideResponse: Partial<GetPosts200> = {},
): GetPosts200 => ({
  posts: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    ...{
      id: faker.number.int({
        min: -2147483648,
        max: 2147483647,
        multipleOf: undefined,
      }),
      content: faker.string.alpha({ length: { min: 10, max: 20 } }),
      created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
      updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
    },
    ...{
      user: {
        id: faker.number.int({
          min: -2147483648,
          max: 2147483647,
          multipleOf: undefined,
        }),
      },
    },
  })),
  ...overrideResponse,
});

export const getPostPostsResponseMock = (
  overrideResponse: Partial<PostPosts200> = {},
): PostPosts200 => ({
  post: {
    ...{
      id: faker.number.int({
        min: -2147483648,
        max: 2147483647,
        multipleOf: undefined,
      }),
      content: faker.string.alpha({ length: { min: 10, max: 20 } }),
      created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
      updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
    },
    ...{
      user: {
        id: faker.number.int({
          min: -2147483648,
          max: 2147483647,
          multipleOf: undefined,
        }),
      },
    },
  },
  ...overrideResponse,
});

export const getPutPostsIdResponseMock = (
  overrideResponse: Partial<PutPostsId200> = {},
): PutPostsId200 => ({
  post: {
    ...{
      id: faker.number.int({
        min: -2147483648,
        max: 2147483647,
        multipleOf: undefined,
      }),
      content: faker.string.alpha({ length: { min: 10, max: 20 } }),
      created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
      updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
    },
    ...{
      user: {
        id: faker.number.int({
          min: -2147483648,
          max: 2147483647,
          multipleOf: undefined,
        }),
      },
    },
  },
  ...overrideResponse,
});

export const getPostUserSignupMockHandler = (
  overrideResponse?:
    | null
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<null> | null),
) => {
  return http.post("*/user/signup", async (info) => {
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 200 });
  });
};

export const getGetPostsMockHandler = (
  overrideResponse?:
    | GetPosts200
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<GetPosts200> | GetPosts200),
) => {
  return http.get("*/posts", async (info) => {
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetPostsResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getPostPostsMockHandler = (
  overrideResponse?:
    | PostPosts200
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<PostPosts200> | PostPosts200),
) => {
  return http.post("*/posts", async (info) => {
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getPostPostsResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getPutPostsIdMockHandler = (
  overrideResponse?:
    | PutPostsId200
    | ((
        info: Parameters<Parameters<typeof http.put>[1]>[0],
      ) => Promise<PutPostsId200> | PutPostsId200),
) => {
  return http.put("*/posts/:id", async (info) => {
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getPutPostsIdResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getDeletePostsIdMockHandler = (
  overrideResponse?:
    | null
    | ((
        info: Parameters<Parameters<typeof http.delete>[1]>[0],
      ) => Promise<null> | null),
) => {
  return http.delete("*/posts/:id", async (info) => {
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 200 });
  });
};
export const getBackendAppOpenAPIMock = () => [
  getPostUserSignupMockHandler(),
  getGetPostsMockHandler(),
  getPostPostsMockHandler(),
  getPutPostsIdMockHandler(),
  getDeletePostsIdMockHandler(),
];
