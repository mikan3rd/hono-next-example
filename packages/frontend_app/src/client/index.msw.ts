/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * backend_app OpenAPI
 * OpenAPI spec version: 1.0.0
 */
import { faker } from "@faker-js/faker";

import { HttpResponse, http } from "msw";

import type {
  DeletePostsId404,
  DeletePostsId500,
  ErrorResponse,
  GetPosts200,
  GetPosts404,
  GetPosts500,
  PostPosts200,
  PostPosts404,
  PostPosts500,
  PutPostsId200,
  PutPostsId404,
  PutPostsId500,
} from "./index.schemas";

export const getGetPostsResponseMock = (
  overrideResponse: Partial<GetPosts200> = {},
): GetPosts200 => ({
  posts: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    id: faker.number.int({
      min: -2147483648,
      max: 2147483647,
      multipleOf: undefined,
    }),
    content: faker.string.alpha({ length: { min: 10, max: 20 } }),
    created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
    updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
  })),
  ...overrideResponse,
});

export const getGetPostsResponseMock200 = (
  overrideResponse: Partial<GetPosts200> = {},
): GetPosts200 => ({
  posts: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    id: faker.number.int({
      min: -2147483648,
      max: 2147483647,
      multipleOf: undefined,
    }),
    content: faker.string.alpha({ length: { min: 10, max: 20 } }),
    created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
    updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
  })),
  ...overrideResponse,
});

export const getGetPostsResponseMock400 = (
  overrideResponse: Partial<ErrorResponse> = {},
): ErrorResponse => ({
  code: faker.helpers.arrayElement([
    "Bad Request",
    "Not Found",
    "Internal Server Error",
  ] as const),
  message: faker.string.alpha({ length: { min: 10, max: 20 } }),
  ...overrideResponse,
});

export const getGetPostsResponseMock404 = (): GetPosts404 => ({
  ...{
    code: faker.helpers.arrayElement([
      "Bad Request",
      "Not Found",
      "Internal Server Error",
    ] as const),
    message: faker.string.alpha({ length: { min: 10, max: 20 } }),
  },
  ...{
    code: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        "Bad Request",
        "Not Found",
        "Internal Server Error",
      ] as const),
      undefined,
    ]),
    message: faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      undefined,
    ]),
  },
});

export const getGetPostsResponseMock500 = (): GetPosts500 => ({
  ...{
    code: faker.helpers.arrayElement([
      "Bad Request",
      "Not Found",
      "Internal Server Error",
    ] as const),
    message: faker.string.alpha({ length: { min: 10, max: 20 } }),
  },
  ...{
    code: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        "Bad Request",
        "Not Found",
        "Internal Server Error",
      ] as const),
      undefined,
    ]),
    message: faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      undefined,
    ]),
  },
});

export const getPostPostsResponseMock = (
  overrideResponse: Partial<PostPosts200> = {},
): PostPosts200 => ({
  post: {
    id: faker.number.int({
      min: -2147483648,
      max: 2147483647,
      multipleOf: undefined,
    }),
    content: faker.string.alpha({ length: { min: 10, max: 20 } }),
    created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
    updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
  },
  ...overrideResponse,
});

export const getPostPostsResponseMock200 = (
  overrideResponse: Partial<PostPosts200> = {},
): PostPosts200 => ({
  post: {
    id: faker.number.int({
      min: -2147483648,
      max: 2147483647,
      multipleOf: undefined,
    }),
    content: faker.string.alpha({ length: { min: 10, max: 20 } }),
    created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
    updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
  },
  ...overrideResponse,
});

export const getPostPostsResponseMock400 = (
  overrideResponse: Partial<ErrorResponse> = {},
): ErrorResponse => ({
  code: faker.helpers.arrayElement([
    "Bad Request",
    "Not Found",
    "Internal Server Error",
  ] as const),
  message: faker.string.alpha({ length: { min: 10, max: 20 } }),
  ...overrideResponse,
});

export const getPostPostsResponseMock404 = (): PostPosts404 => ({
  ...{
    code: faker.helpers.arrayElement([
      "Bad Request",
      "Not Found",
      "Internal Server Error",
    ] as const),
    message: faker.string.alpha({ length: { min: 10, max: 20 } }),
  },
  ...{
    code: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        "Bad Request",
        "Not Found",
        "Internal Server Error",
      ] as const),
      undefined,
    ]),
    message: faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      undefined,
    ]),
  },
});

export const getPostPostsResponseMock500 = (): PostPosts500 => ({
  ...{
    code: faker.helpers.arrayElement([
      "Bad Request",
      "Not Found",
      "Internal Server Error",
    ] as const),
    message: faker.string.alpha({ length: { min: 10, max: 20 } }),
  },
  ...{
    code: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        "Bad Request",
        "Not Found",
        "Internal Server Error",
      ] as const),
      undefined,
    ]),
    message: faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      undefined,
    ]),
  },
});

export const getPutPostsIdResponseMock = (
  overrideResponse: Partial<PutPostsId200> = {},
): PutPostsId200 => ({
  post: {
    id: faker.number.int({
      min: -2147483648,
      max: 2147483647,
      multipleOf: undefined,
    }),
    content: faker.string.alpha({ length: { min: 10, max: 20 } }),
    created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
    updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
  },
  ...overrideResponse,
});

export const getPutPostsIdResponseMock200 = (
  overrideResponse: Partial<PutPostsId200> = {},
): PutPostsId200 => ({
  post: {
    id: faker.number.int({
      min: -2147483648,
      max: 2147483647,
      multipleOf: undefined,
    }),
    content: faker.string.alpha({ length: { min: 10, max: 20 } }),
    created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
    updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
  },
  ...overrideResponse,
});

export const getPutPostsIdResponseMock400 = (
  overrideResponse: Partial<ErrorResponse> = {},
): ErrorResponse => ({
  code: faker.helpers.arrayElement([
    "Bad Request",
    "Not Found",
    "Internal Server Error",
  ] as const),
  message: faker.string.alpha({ length: { min: 10, max: 20 } }),
  ...overrideResponse,
});

export const getPutPostsIdResponseMock404 = (): PutPostsId404 => ({
  ...{
    code: faker.helpers.arrayElement([
      "Bad Request",
      "Not Found",
      "Internal Server Error",
    ] as const),
    message: faker.string.alpha({ length: { min: 10, max: 20 } }),
  },
  ...{
    code: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        "Bad Request",
        "Not Found",
        "Internal Server Error",
      ] as const),
      undefined,
    ]),
    message: faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      undefined,
    ]),
  },
});

export const getPutPostsIdResponseMock500 = (): PutPostsId500 => ({
  ...{
    code: faker.helpers.arrayElement([
      "Bad Request",
      "Not Found",
      "Internal Server Error",
    ] as const),
    message: faker.string.alpha({ length: { min: 10, max: 20 } }),
  },
  ...{
    code: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        "Bad Request",
        "Not Found",
        "Internal Server Error",
      ] as const),
      undefined,
    ]),
    message: faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      undefined,
    ]),
  },
});

export const getDeletePostsIdResponseMock400 = (
  overrideResponse: Partial<ErrorResponse> = {},
): ErrorResponse => ({
  code: faker.helpers.arrayElement([
    "Bad Request",
    "Not Found",
    "Internal Server Error",
  ] as const),
  message: faker.string.alpha({ length: { min: 10, max: 20 } }),
  ...overrideResponse,
});

export const getDeletePostsIdResponseMock404 = (): DeletePostsId404 => ({
  ...{
    code: faker.helpers.arrayElement([
      "Bad Request",
      "Not Found",
      "Internal Server Error",
    ] as const),
    message: faker.string.alpha({ length: { min: 10, max: 20 } }),
  },
  ...{
    code: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        "Bad Request",
        "Not Found",
        "Internal Server Error",
      ] as const),
      undefined,
    ]),
    message: faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      undefined,
    ]),
  },
});

export const getDeletePostsIdResponseMock500 = (): DeletePostsId500 => ({
  ...{
    code: faker.helpers.arrayElement([
      "Bad Request",
      "Not Found",
      "Internal Server Error",
    ] as const),
    message: faker.string.alpha({ length: { min: 10, max: 20 } }),
  },
  ...{
    code: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        "Bad Request",
        "Not Found",
        "Internal Server Error",
      ] as const),
      undefined,
    ]),
    message: faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      undefined,
    ]),
  },
});

export const getGetPostsMockHandler = (
  overrideResponse?:
    | GetPosts200
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<GetPosts200> | GetPosts200),
) => {
  return http.get("*/posts", async (info) => {
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetPostsResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getGetPostsMockHandler200 = (
  overrideResponse?:
    | GetPosts200
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<GetPosts200> | GetPosts200),
) => {
  return http.get("*/posts", async (info) => {
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetPostsResponseMock200(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getGetPostsMockHandler400 = (
  overrideResponse?:
    | ErrorResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<ErrorResponse> | ErrorResponse),
) => {
  return http.get("*/posts", async (info) => {
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetPostsResponseMock400(),
      ),
      { status: 400, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getGetPostsMockHandler404 = (
  overrideResponse?:
    | GetPosts404
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<GetPosts404> | GetPosts404),
) => {
  return http.get("*/posts", async (info) => {
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetPostsResponseMock404(),
      ),
      { status: 404, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getGetPostsMockHandler500 = (
  overrideResponse?:
    | GetPosts500
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<GetPosts500> | GetPosts500),
) => {
  return http.get("*/posts", async (info) => {
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetPostsResponseMock500(),
      ),
      { status: 500, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getPostPostsMockHandler = (
  overrideResponse?:
    | PostPosts200
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<PostPosts200> | PostPosts200),
) => {
  return http.post("*/posts", async (info) => {
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getPostPostsResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getPostPostsMockHandler200 = (
  overrideResponse?:
    | PostPosts200
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<PostPosts200> | PostPosts200),
) => {
  return http.post("*/posts", async (info) => {
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getPostPostsResponseMock200(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getPostPostsMockHandler400 = (
  overrideResponse?:
    | ErrorResponse
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<ErrorResponse> | ErrorResponse),
) => {
  return http.post("*/posts", async (info) => {
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getPostPostsResponseMock400(),
      ),
      { status: 400, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getPostPostsMockHandler404 = (
  overrideResponse?:
    | PostPosts404
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<PostPosts404> | PostPosts404),
) => {
  return http.post("*/posts", async (info) => {
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getPostPostsResponseMock404(),
      ),
      { status: 404, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getPostPostsMockHandler500 = (
  overrideResponse?:
    | PostPosts500
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<PostPosts500> | PostPosts500),
) => {
  return http.post("*/posts", async (info) => {
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getPostPostsResponseMock500(),
      ),
      { status: 500, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getPutPostsIdMockHandler = (
  overrideResponse?:
    | PutPostsId200
    | ((
        info: Parameters<Parameters<typeof http.put>[1]>[0],
      ) => Promise<PutPostsId200> | PutPostsId200),
) => {
  return http.put("*/posts/:id", async (info) => {
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getPutPostsIdResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getPutPostsIdMockHandler200 = (
  overrideResponse?:
    | PutPostsId200
    | ((
        info: Parameters<Parameters<typeof http.put>[1]>[0],
      ) => Promise<PutPostsId200> | PutPostsId200),
) => {
  return http.put("*/posts/:id", async (info) => {
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getPutPostsIdResponseMock200(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getPutPostsIdMockHandler400 = (
  overrideResponse?:
    | ErrorResponse
    | ((
        info: Parameters<Parameters<typeof http.put>[1]>[0],
      ) => Promise<ErrorResponse> | ErrorResponse),
) => {
  return http.put("*/posts/:id", async (info) => {
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getPutPostsIdResponseMock400(),
      ),
      { status: 400, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getPutPostsIdMockHandler404 = (
  overrideResponse?:
    | PutPostsId404
    | ((
        info: Parameters<Parameters<typeof http.put>[1]>[0],
      ) => Promise<PutPostsId404> | PutPostsId404),
) => {
  return http.put("*/posts/:id", async (info) => {
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getPutPostsIdResponseMock404(),
      ),
      { status: 404, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getPutPostsIdMockHandler500 = (
  overrideResponse?:
    | PutPostsId500
    | ((
        info: Parameters<Parameters<typeof http.put>[1]>[0],
      ) => Promise<PutPostsId500> | PutPostsId500),
) => {
  return http.put("*/posts/:id", async (info) => {
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getPutPostsIdResponseMock500(),
      ),
      { status: 500, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getDeletePostsIdMockHandler = (
  overrideResponse?:
    | null
    | ((
        info: Parameters<Parameters<typeof http.delete>[1]>[0],
      ) => Promise<null> | null),
) => {
  return http.delete("*/posts/:id", async (info) => {
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 200 });
  });
};

export const getDeletePostsIdMockHandler200 = (
  overrideResponse?:
    | null
    | ((
        info: Parameters<Parameters<typeof http.delete>[1]>[0],
      ) => Promise<null> | null),
) => {
  return http.delete("*/posts/:id", async (info) => {
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 200 });
  });
};

export const getDeletePostsIdMockHandler400 = (
  overrideResponse?:
    | ErrorResponse
    | ((
        info: Parameters<Parameters<typeof http.delete>[1]>[0],
      ) => Promise<ErrorResponse> | ErrorResponse),
) => {
  return http.delete("*/posts/:id", async (info) => {
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getDeletePostsIdResponseMock400(),
      ),
      { status: 400, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getDeletePostsIdMockHandler404 = (
  overrideResponse?:
    | DeletePostsId404
    | ((
        info: Parameters<Parameters<typeof http.delete>[1]>[0],
      ) => Promise<DeletePostsId404> | DeletePostsId404),
) => {
  return http.delete("*/posts/:id", async (info) => {
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getDeletePostsIdResponseMock404(),
      ),
      { status: 404, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getDeletePostsIdMockHandler500 = (
  overrideResponse?:
    | DeletePostsId500
    | ((
        info: Parameters<Parameters<typeof http.delete>[1]>[0],
      ) => Promise<DeletePostsId500> | DeletePostsId500),
) => {
  return http.delete("*/posts/:id", async (info) => {
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getDeletePostsIdResponseMock500(),
      ),
      { status: 500, headers: { "Content-Type": "application/json" } },
    );
  });
};
export const getBackendAppOpenAPIMock = () => [
  getGetPostsMockHandler(),
  getPostPostsMockHandler(),
  getPutPostsIdMockHandler(),
  getDeletePostsIdMockHandler(),
];
