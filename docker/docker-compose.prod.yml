name: "hono-next-example--prod"

services:
  studio:
    extends:
      file: docker-compose.supabase.yml
      service: studio

  analytics:
    extends:
      file: docker-compose.supabase.yml
      service: analytics

  db:
    extends:
      file: docker-compose.supabase.yml
      service: db

  meta:
    extends:
      file: docker-compose.supabase.yml
      service: meta

  auth:
    extends:
      file: docker-compose.supabase.yml
      service: auth

  kong:
    extends:
      file: docker-compose.supabase.yml
      service: kong

  vector:
    extends:
      file: docker-compose.supabase.yml
      service: vector

  db_migrate:
    build:
      context: ..
      dockerfile: packages/backend_app/Dockerfile
      target: release
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_PORT: ${POSTGRES_PORT}
      DATABASE_HOST: db
      SUPABASE_URL: http://kong:8000
      SUPABASE_KEY: ${ANON_KEY}
    command: |
      bun db:push
    depends_on:
      db:
        condition: service_healthy

  backend_app:
    build:
      context: ..
      dockerfile: packages/backend_app/Dockerfile
      target: release
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_PORT: ${POSTGRES_PORT}
      DATABASE_HOST: db
      SUPABASE_URL: http://kong:8000
      SUPABASE_KEY: ${ANON_KEY}
      ENABLE_DB_INITIALIZE: true
    ports:
      - "${BACKEND_APP_PORT}:${BACKEND_APP_PORT}"
    depends_on:
      db_migrate:
        condition: service_completed_successfully

  backend_health_check:
    image: curlimages/curl
    command:
      - sh
      - -c
      - |
        for i in $(seq 1 3); do
          if curl -sf "http://backend_app:${BACKEND_APP_PORT}/healthz"; then
            echo "App is healthy."
            exit 0
          fi
          echo "Waiting for app... (attempt $$i/3)"
          sleep 2
        done
        echo "Healthcheck failed after 3 attempts"
        exit 1
    depends_on:
      - backend_app

  frontend_app:
    build:
      context: ..
      dockerfile: packages/frontend_app/Dockerfile
      target: runner
      args:
        NEXT_PUBLIC_BACKEND_APP_URL: ${NEXT_PUBLIC_BACKEND_APP_URL}
        NEXT_PUBLIC_SUPABASE_URL: ${API_EXTERNAL_URL}
        NEXT_PUBLIC_SUPABASE_PUBLISHABLE_KEY: ${ANON_KEY}
        HOSTNAME: ${HOSTNAME}
    network_mode: host
    ports:
      - "${FRONTEND_APP_PORT}:${FRONTEND_APP_PORT}"
    depends_on:
      backend_health_check:
        condition: service_completed_successfully
      auth:
        condition: service_started

  e2e:
    build:
      context: ..
      dockerfile: packages/e2e/Dockerfile
    environment:
      CI: true
      BACKEND_APP_SERVER_URL: ${BACKEND_APP_SERVER_URL}
      FRONTEND_APP_SERVER_URL: ${FRONTEND_APP_SERVER_URL}
      FRONTEND_APP_PORT: ${FRONTEND_APP_PORT}
    network_mode: host
    depends_on:
      - frontend_app
    volumes:
      - ../packages/e2e/tests:/app/packages/e2e/tests
      - ../packages/e2e/playwright-report:/app/packages/e2e/playwright-report
      - ../packages/e2e/test-results:/app/packages/e2e/test-results

volumes:
  db-config:
